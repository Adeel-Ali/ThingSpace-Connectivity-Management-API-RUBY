# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class GroupUpdateRequest < BaseModel
    # TODO: Write general description for this method
    # @return [List of DeviceId]
    attr_accessor :devices_to_add

    # TODO: Write general description for this method
    # @return [List of DeviceId]
    attr_accessor :devices_to_remove

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :new_group_description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :new_group_name

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["devices_to_add"] = "devicesToAdd"
        @hash["devices_to_remove"] = "devicesToRemove"
        @hash["new_group_description"] = "newGroupDescription"
        @hash["new_group_name"] = "newGroupName"
      end
      @hash
    end

    def initialize(devices_to_add = nil,
                   devices_to_remove = nil,
                   new_group_description = nil,
                   new_group_name = nil)
      @devices_to_add = devices_to_add
      @devices_to_remove = devices_to_remove
      @new_group_description = new_group_description
      @new_group_name = new_group_name
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        # Parameter is an array, so we need to iterate through it
        devices_to_add = nil
        if hash["devicesToAdd"] != nil
          devices_to_add = Array.new
          hash["devicesToAdd"].each{|structure| devices_to_add << (DeviceId.from_hash(structure) if structure)}
        end
        # Parameter is an array, so we need to iterate through it
        devices_to_remove = nil
        if hash["devicesToRemove"] != nil
          devices_to_remove = Array.new
          hash["devicesToRemove"].each{|structure| devices_to_remove << (DeviceId.from_hash(structure) if structure)}
        end
        new_group_description = hash["newGroupDescription"]
        new_group_name = hash["newGroupName"]

        # Create object from extracted values
        GroupUpdateRequest.new(devices_to_add,
                               devices_to_remove,
                               new_group_description,
                               new_group_name)
      end
    end
  end
end
