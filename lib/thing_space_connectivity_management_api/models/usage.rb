# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class Usage < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :bytes_used

    # TODO: Write general description for this method
    # @return [List of KvPair]
    attr_accessor :extended_attributes

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_plan

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sms_used

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :source

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :timestamp

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["bytes_used"] = "bytesUsed"
        @hash["extended_attributes"] = "extendedAttributes"
        @hash["service_plan"] = "servicePlan"
        @hash["sms_used"] = "smsUsed"
        @hash["source"] = "source"
        @hash["timestamp"] = "timestamp"
      end
      @hash
    end

    def initialize(bytes_used = nil,
                   extended_attributes = nil,
                   service_plan = nil,
                   sms_used = nil,
                   source = nil,
                   timestamp = nil)
      @bytes_used = bytes_used
      @extended_attributes = extended_attributes
      @service_plan = service_plan
      @sms_used = sms_used
      @source = source
      @timestamp = timestamp
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        bytes_used = hash["bytesUsed"]
        # Parameter is an array, so we need to iterate through it
        extended_attributes = nil
        if hash["extendedAttributes"] != nil
          extended_attributes = Array.new
          hash["extendedAttributes"].each{|structure| extended_attributes << (KvPair.from_hash(structure) if structure)}
        end
        service_plan = hash["servicePlan"]
        sms_used = hash["smsUsed"]
        source = hash["source"]
        timestamp = hash["timestamp"]

        # Create object from extracted values
        Usage.new(bytes_used,
                  extended_attributes,
                  service_plan,
                  sms_used,
                  source,
                  timestamp)
      end
    end
  end
end
