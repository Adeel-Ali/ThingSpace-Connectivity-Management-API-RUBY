# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class ChangeDeviceIdRequest < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :assign_non_geo_mdn

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :change_4_g_option

    # TODO: Write general description for this method
    # @return [List of DeviceId]
    attr_accessor :device_ids

    # TODO: Write general description for this method
    # @return [List of DeviceId]
    attr_accessor :device_ids_to

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa_nxx

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_plan

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip_code

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["assign_non_geo_mdn"] = "assignNonGeoMdn"
        @hash["change_4_g_option"] = "change4gOption"
        @hash["device_ids"] = "deviceIds"
        @hash["device_ids_to"] = "deviceIdsTo"
        @hash["npa_nxx"] = "npaNxx"
        @hash["service_plan"] = "servicePlan"
        @hash["zip_code"] = "zipCode"
      end
      @hash
    end

    def initialize(assign_non_geo_mdn = nil,
                   change_4_g_option = nil,
                   device_ids = nil,
                   device_ids_to = nil,
                   npa_nxx = nil,
                   service_plan = nil,
                   zip_code = nil)
      @assign_non_geo_mdn = assign_non_geo_mdn
      @change_4_g_option = change_4_g_option
      @device_ids = device_ids
      @device_ids_to = device_ids_to
      @npa_nxx = npa_nxx
      @service_plan = service_plan
      @zip_code = zip_code
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        assign_non_geo_mdn = hash["assignNonGeoMdn"]
        change_4_g_option = hash["change4gOption"]
        # Parameter is an array, so we need to iterate through it
        device_ids = nil
        if hash["deviceIds"] != nil
          device_ids = Array.new
          hash["deviceIds"].each{|structure| device_ids << (DeviceId.from_hash(structure) if structure)}
        end
        # Parameter is an array, so we need to iterate through it
        device_ids_to = nil
        if hash["deviceIdsTo"] != nil
          device_ids_to = Array.new
          hash["deviceIdsTo"].each{|structure| device_ids_to << (DeviceId.from_hash(structure) if structure)}
        end
        npa_nxx = hash["npaNxx"]
        service_plan = hash["servicePlan"]
        zip_code = hash["zipCode"]

        # Create object from extracted values
        ChangeDeviceIdRequest.new(assign_non_geo_mdn,
                                  change_4_g_option,
                                  device_ids,
                                  device_ids_to,
                                  npa_nxx,
                                  service_plan,
                                  zip_code)
      end
    end
  end
end
