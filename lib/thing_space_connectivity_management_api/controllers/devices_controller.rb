# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class DevicesController < BaseController
    @@instance = DevicesController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
    # @param [String] service_type Required parameter: Identifier type
    # @param [ChangeDeviceIdRequest] request Required parameter: Device Usage Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def change_device_id_using_put(service_type, 
                                   request, 
                                   vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/{serviceType}/actions/deviceId'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'serviceType' => service_type
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Returns the total amount of data sent and the total number of SMS messages sent or received by a set of devices in a specified timeframe.
    # @param [DeviceAggregateUsageListRequest] request Required parameter: Request
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_aggregate_using_post(request, 
                                    vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/usage/actions/list/aggregate'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Returns the network data usage history of a device during a specified time period.
    # @param [DeviceUsageListRequest] request Required parameter: Device Usage Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return List of DeviceUsageListResponse response from the API call
    def create_usage_list_using_post(request, 
                                     vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/usage/actions/list'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| DeviceUsageListResponse.from_hash(element)}
    end

    # Requests the current PRL version for devices, which can help determine which devices need a PRL update.
    # @param [DevicePrlListRequest] request Required parameter: Device PRL Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_prl_list_using_post(request, 
                                   vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/prl/actions/list'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Returns the provisioning history of a device during a specified time period.
    # @param [DeviceProvisioningHistoryListRequest] request Required parameter: Device ProHistory Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return List of DeviceProvisioningHistoryListResponse response from the API call
    def create_provisioning_history_list_using_post(request, 
                                                    vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/history/actions/list'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| DeviceProvisioningHistoryListResponse.from_hash(element)}
    end

    # Changes or removes the costCenterCode value for one or more devices.
    # @param [DeviceCostCenterRequest] request Required parameter: Request
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def change_cost_center_using_put(request, 
                                     vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/costCenter'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Returns a list of network connection events for a device during a specified time period.
    # @param [DeviceConnectionListRequest] request Required parameter: Device Connection Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return List of ConnectionHistoryResponse response from the API call
    def create_connection_list_history_using_post(request, 
                                                  vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/connections/actions/listHistory'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| ConnectionHistoryResponse.from_hash(element)}
    end

    # Returns a list of network connection events for a device during a specified time period.
    # @param [DeviceConnectionListRequest] request Required parameter: Device Connection Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return List of ConnectionEvent response from the API call
    def create_connection_list_using_post(request, 
                                          vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/connections/actions/list'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| ConnectionEvent.from_hash(element)}
    end

    # Restore service to one or more suspended devices. 
    # @param [CarrierActionsRequest] request Required parameter: Update state
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_restore_using_post(request, 
                                  vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/restore'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Suspends service for one or more devices. 
    # @param [CarrierActionsRequest] request Required parameter: Update state
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_suspend_using_post(request, 
                                  vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/suspend'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Sets a new service plan for one or more devices.
    # @param [ServicePlanUpdateRequest] request Required parameter: Request
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def update_service_plan_using_put(request, 
                                      vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/plan'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Returns information about a specified device or a list of devices in an account.
    # @param [DeviceListRequest] request Required parameter: Device Query
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return DeviceListResponse response from the API call
    def create_list_using_post(request, 
                               vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/list'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return DeviceListResponse.from_hash(decoded)
    end

    # Deactivates service for one or more devices.
    # @param [CarrierDeactivateRequest] request Required parameter: Deactivate state
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_deactive_using_post(request, 
                                   vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/deactivate'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Updates one or more custom field values for devices.
    # @param [CustomFieldsUpdateRequest] request Required parameter: Request
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def update_custom_fields_using_put(request, 
                                       vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/customFields'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end

    # Adds up to 200 new devices, without provisioning lines of service for them.
    # @param [AddDevicesRequest] request Required parameter: Devices to Add
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return List of AddDevicesResponseMessage response from the API call
    def add_using_post(request, 
                       vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/add'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| AddDevicesResponseMessage.from_hash(element)}
    end

    # Activates service for one or more devices.
    # @param [CarrierActivateRequest] request Required parameter: Activate state
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RequestResponse response from the API call
    def create_active_using_post(request, 
                                 vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/devices/actions/activate'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RequestResponse.from_hash(decoded)
    end
  end
end
