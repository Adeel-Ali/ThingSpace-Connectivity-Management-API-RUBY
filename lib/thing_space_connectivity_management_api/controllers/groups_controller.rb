# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class GroupsController < BaseController
    @@instance = GroupsController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Deletes a device group. Devices in the group are moved to the default device group and are not deleted from the account.
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @param [String] aname Required parameter: Account name
    # @param [String] gname Required parameter: Group name
    # @return RestSuccessResponse response from the API call
    def delete_device_group_using_delete(vz_m_2_m_token, 
                                         aname, 
                                         gname)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/groups/{aname}/name/{gname}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'aname' => aname,
        'gname' => gname
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.delete _query_url, headers: _headers
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RestSuccessResponse.from_hash(decoded)
    end

    # Make changes to a device group, including changing the name and description, and adding or removing devices.
    # @param [GroupUpdateRequest] request Required parameter: Request
    # @param [String] aname Required parameter: Account name
    # @param [String] gname Required parameter: Group name
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RestSuccessResponse response from the API call
    def update_device_group_using_put(request, 
                                      aname, 
                                      gname, 
                                      vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/groups/{aname}/name/{gname}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'aname' => aname,
        'gname' => gname
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RestSuccessResponse.from_hash(decoded)
    end

    # Returns the name, description, and list of devices in a device group.
    # @param [String] aname Required parameter: Account name
    # @param [String] gname Required parameter: Group name
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @param [Long] mnext Optional parameter: Continue the previous query from the pageUrl pagetoken
    # @return GroupListResponse response from the API call
    def get_device_group_info_using_get(aname, 
                                        gname, 
                                        vz_m_2_m_token, 
                                        mnext = nil)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/groups/{aname}/name/{gname}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'aname' => aname,
        'gname' => gname
      }

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'next' => mnext
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.get _query_url, headers: _headers
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return GroupListResponse.from_hash(decoded)
    end

    # Returns a list of device groups in an account
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @param [String] aname Required parameter: Account name
    # @return List of GroupResponse response from the API call
    def get_list_using_get(vz_m_2_m_token, 
                           aname)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/groups/{aname}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'aname' => aname
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.get _query_url, headers: _headers
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| GroupResponse.from_hash(element)}
    end

    # Creates a new device group and optionally adds a set of devices to that group.
    # @param [CreateDevGroupRequest] request Required parameter: Request
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @return RestSuccessResponse response from the API call
    def create_device_group_using_post(request, 
                                       vz_m_2_m_token)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/groups'

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return RestSuccessResponse.from_hash(decoded)
    end
  end
end
