# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  class PlansController < BaseController
    @@instance = PlansController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Returns a list of all data service plans that are associated with a specified account.
    # @param [String] vz_m_2_m_token Required parameter: M2M-MC Session Token
    # @param [String] aname Required parameter: Account name
    # @return List of ServicePlanResponse response from the API call
    def get_service_plan_list_using_get(vz_m_2_m_token, 
                                        aname)
      # the base uri for api requests
      _query_builder = Configuration.base_uri.dup

      # prepare query string for API call
      _query_builder << '/plans/{aname}'

      # process optional query parameters
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'aname' => aname
      }

      # validate and preprocess url
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'user-agent' => 'APIMATIC 2.0',
        'accept' => 'application/json',
        'api_key' => Configuration.api_key,
        'VZ-M2M-Token' => vz_m_2_m_token
      }

      # Create the HttpRequest object for the call
      _request = @http_client.get _query_url, headers: _headers
      
      # Call the on_before_request callback
      @http_call_back.on_before_request(_request) if @http_call_back

      # Invoke the API call and get the response
      _response = @http_client.execute_as_string(_request)

      # Wrap the request and response in an HttpContext object
      _context = HttpContext.new(_request, _response)

      # Call the on_after_response callback
      @http_call_back.on_after_response(_context) if @http_call_back

      # Endpoint error handling using HTTP status codes.
      if _response.status_code == 400
        raise RestErrorResponseException.new '400 - Error Response', _context
      end

      # Global error handling using HTTP status codes.
      validate_response(_context)

      # Return appropriate response type
      decoded = APIHelper.json_deserialize(_response.raw_body)
      return decoded.map{|element| ServicePlanResponse.from_hash(element)}
    end
  end
end
